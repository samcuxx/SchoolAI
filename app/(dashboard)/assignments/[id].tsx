import { View, StyleSheet, ScrollView } from 'react-native';
import { Text, Card, Button, Chip, Portal, Dialog } from 'react-native-paper';
import { useAuth } from '../../../contexts/AuthContext';
import { supabase } from '../../../services/auth/supabase';
import { useEffect, useState } from 'react';
import { router, useLocalSearchParams } from 'expo-router';
import { useAIResponses } from '../../../hooks/useAIResponses';
import { Clipboard } from 'react-native';
import { shareContent } from '../../../services/sharing/shareContent';
import { exportToPDF } from '../../../services/export/pdfExport';

type Assignment = {
  id: string;
  title: string;
  subject: string;
  instructions: string;
  due_date: string;
  status: string;
  content: string;
  created_at: string;
};

export default function AssignmentDetail() {
  const { id } = useLocalSearchParams();
  const { session } = useAuth();
  const [assignment, setAssignment] = useState<Assignment | null>(null);
  const [loading, setLoading] = useState(true);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const { responses, loading: loadingResponses } = useAIResponses(id as string);
  const { profile } = useAuth();
  const [exporting, setExporting] = useState(false);

  useEffect(() => {
    fetchAssignment();
  }, [id]);

  async function fetchAssignment() {
    try {
      if (!session?.user || !id) return;

      const { data, error } = await supabase
        .from('assignments')
        .select('*')
        .eq('id', id)
        .single();

      if (error) throw error;
      setAssignment(data);
    } catch (error) {
      console.error('Error fetching assignment:', error);
      alert('Error loading assignment');
      router.back();
    } finally {
      setLoading(false);
    }
  }

  async function handleDelete() {
    try {
      if (!session?.user || !id) return;

      const { error } = await supabase
        .from('assignments')
        .delete()
        .eq('id', id);

      if (error) throw error;

      router.replace('/(dashboard)/assignments');
    } catch (error) {
      console.error('Error deleting assignment:', error);
      alert('Error deleting assignment');
    }
  }

  async function handleStatusChange(newStatus: string) {
    try {
      if (!session?.user || !id) return;

      const { error } = await supabase
        .from('assignments')
        .update({ status: newStatus })
        .eq('id', id);

      if (error) throw error;

      setAssignment(prev => prev ? { ...prev, status: newStatus } : null);
    } catch (error) {
      console.error('Error updating status:', error);
      alert('Error updating status');
    }
  }

  async function handleShareAssignment() {
    try {
      if (!assignment) return;

      await shareContent(
        `${assignment.instructions}\n\nDue Date: ${new Date(assignment.due_date).toLocaleDateString()}`,
        {
          title: assignment.title,
          message: `Assignment for ${assignment.subject}`,
          filename: `assignment_${assignment.id}.txt`,
        }
      );
    } catch (error) {
      console.error('Error sharing assignment:', error);
      alert('Error sharing assignment');
    }
  }

  async function handleShareResponse(response: AIResponse) {
    try {
      await shareContent(
        response.response,
        {
          title: `AI Response - ${assignment?.title}`,
          message: `Generated by ${response.provider === 'openai' ? 'ChatGPT' : 'Gemini AI'} on ${new Date(response.created_at).toLocaleString()}`,
          filename: `ai_response_${response.id}.txt`,
        }
      );
    } catch (error) {
      console.error('Error sharing response:', error);
      alert('Error sharing response');
    }
  }

  async function handleExportPDF(response?: AIResponse) {
    try {
      if (!assignment || !profile) {
        alert('Missing assignment or profile information');
        return;
      }

      // Show loading state
      setExporting(true);

      await exportToPDF({
        title: assignment.title,
        subject: assignment.subject,
        studentName: profile.full_name || 'Unknown Student',
        studentNumber: profile.student_number || 'N/A',
        schoolName: profile.school_name || 'School Not Set',
        dueDate: assignment.due_date,
        content: response ? response.response : assignment.instructions,
        provider: response?.provider ? 
          (response.provider === 'openai' ? 'ChatGPT' : 'Gemini AI') : 
          undefined,
        generatedDate: response?.created_at
      });
    } catch (error) {
      console.error('Error exporting PDF:', error);
      alert(error instanceof Error ? error.message : 'Error exporting PDF');
    } finally {
      setExporting(false);
    }
  }

  if (loading || !assignment) {
    return (
      <View style={styles.container}>
        <Text>Loading...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <ScrollView>
        <Card style={styles.card}>
          <Card.Content>
            <Text variant="headlineMedium">{assignment.title}</Text>
            <Text variant="titleMedium" style={styles.subject}>
              Subject: {assignment.subject}
            </Text>
            
            <View style={styles.statusContainer}>
              <Text variant="bodyLarge">Status: </Text>
              <Chip
                mode="flat"
                onPress={() => {
                  const newStatus = assignment.status === 'draft' ? 'in_progress' : 
                    assignment.status === 'in_progress' ? 'completed' : 'draft';
                  handleStatusChange(newStatus);
                }}
                style={styles.statusChip}
              >
                {assignment.status.replace('_', ' ').toUpperCase()}
              </Chip>
            </View>

            <Text variant="bodyLarge" style={styles.sectionTitle}>
              Due Date
            </Text>
            <Text variant="bodyMedium" style={styles.sectionContent}>
              {new Date(assignment.due_date).toLocaleDateString()}
            </Text>

            <Text variant="bodyLarge" style={styles.sectionTitle}>
              Instructions
            </Text>
            <Text variant="bodyMedium" style={styles.sectionContent}>
              {assignment.instructions || 'No instructions provided'}
            </Text>

            {assignment.content && (
              <>
                <Text variant="bodyLarge" style={styles.sectionTitle}>
                  Content
                </Text>
                <Text variant="bodyMedium" style={styles.sectionContent}>
                  {assignment.content}
                </Text>
              </>
            )}
          </Card.Content>
        </Card>

        <View style={styles.buttonContainer}>
          <Button
            mode="contained"
            icon="pencil"
            onPress={() => router.push(`/assignments/${id}/edit`)}
            style={styles.button}
          >
            Edit Assignment
          </Button>
          <Button
            mode="contained"
            icon="robot"
            onPress={() => router.push(`/assignments/${id}/generate`)}
            style={styles.button}
          >
            Generate Content
          </Button>
          <Button
            mode="outlined"
            icon="delete"
            onPress={() => setShowDeleteDialog(true)}
            style={styles.button}
            textColor="red"
          >
            Delete Assignment
          </Button>
          <Button
            mode="contained"
            icon="share"
            onPress={handleShareAssignment}
            style={styles.button}
          >
            Share Assignment
          </Button>
          <Button
            mode="contained"
            icon="file-pdf-box"
            onPress={() => handleExportPDF()}
            style={styles.button}
          >
            Export as PDF
          </Button>
        </View>

        {responses.length > 0 && (
          <View style={styles.section}>
            <Text variant="titleLarge" style={styles.sectionTitle}>
              Generated Content
            </Text>
            {responses.map((response) => (
              <Card key={response.id} style={styles.responseCard}>
                <Card.Content>
                  <View style={styles.responseHeader}>
                    <Chip
                      mode="outlined"
                      style={styles.providerChip}
                      textStyle={{ color: response.provider === 'openai' ? '#10a37f' : '#1a73e8' }}
                    >
                      {response.provider === 'openai' ? 'ChatGPT' : 'Gemini AI'}
                    </Chip>
                    <Text variant="bodySmall" style={styles.timestamp}>
                      {new Date(response.created_at).toLocaleString()}
                    </Text>
                  </View>

                  <Text variant="bodyMedium" style={styles.responseText}>
                    {response.response}
                  </Text>

                  <View style={styles.responseActions}>
                    <Button
                      mode="text"
                      icon="refresh"
                      onPress={() => router.push(`/assignments/${id}/generate`)}
                      style={styles.actionButton}
                    >
                      Generate New
                    </Button>
                    <Button
                      mode="text"
                      icon="content-copy"
                      onPress={() => {
                        Clipboard.setString(response.response);
                        alert('Copied to clipboard!');
                      }}
                      style={styles.actionButton}
                    >
                      Copy
                    </Button>
                    <Button
                      mode="text"
                      icon="share"
                      onPress={() => handleShareResponse(response)}
                      style={styles.actionButton}
                    >
                      Share
                    </Button>
                    <Button
                      mode="text"
                      icon="file-pdf-box"
                      onPress={() => handleExportPDF(response)}
                      loading={exporting}
                      disabled={exporting}
                      style={styles.actionButton}
                    >
                      {exporting ? 'Exporting...' : 'Export PDF'}
                    </Button>
                  </View>
                </Card.Content>
              </Card>
            ))}
          </View>
        )}
      </ScrollView>

      <Portal>
        <Dialog
          visible={showDeleteDialog}
          onDismiss={() => setShowDeleteDialog(false)}
        >
          <Dialog.Title>Delete Assignment</Dialog.Title>
          <Dialog.Content>
            <Text variant="bodyMedium">
              Are you sure you want to delete this assignment? This action cannot be undone.
            </Text>
          </Dialog.Content>
          <Dialog.Actions>
            <Button onPress={() => setShowDeleteDialog(false)}>Cancel</Button>
            <Button onPress={handleDelete} textColor="red">Delete</Button>
          </Dialog.Actions>
        </Dialog>
      </Portal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  card: {
    margin: 16,
  },
  subject: {
    marginTop: 8,
    marginBottom: 16,
  },
  statusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  statusChip: {
    marginLeft: 8,
  },
  sectionTitle: {
    marginTop: 16,
    fontWeight: 'bold',
  },
  sectionContent: {
    marginTop: 8,
  },
  buttonContainer: {
    padding: 16,
  },
  button: {
    marginBottom: 12,
  },
  responseCard: {
    marginTop: 12,
  },
  responseHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  providerChip: {
    height: 28,
  },
  responseActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#eee',
    paddingTop: 12,
  },
  actionButton: {
    marginLeft: 8,
  },
  responseText: {
    whiteSpace: 'pre-wrap',
  },
  timestamp: {
    marginTop: 8,
    opacity: 0.7,
  },
}); 