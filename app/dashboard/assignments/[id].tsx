import { View, StyleSheet, ScrollView } from "react-native";
import {
  Text,
  Surface,
  Button,
  Chip,
  Portal,
  Dialog,
  IconButton,
  Divider,
} from "react-native-paper";
import { useAuth } from "../../../contexts/AuthContext";
import { supabase } from "../../../services/auth/supabase";
import { useEffect, useState } from "react";
import { router, useLocalSearchParams } from "expo-router";
import { useAIResponses } from "../../../hooks/useAIResponses";
import { Clipboard } from "react-native";
import { shareContent } from "../../../services/sharing/shareContent";
import { exportToPDF } from "../../../services/export/pdfExport";
import { MarkdownPreview } from "../../../components/MarkdownPreview";
import {
  PDFFormatDialog,
  type PDFFormat,
} from "../../../components/PDFFormatDialog";
import { LinearGradient } from "expo-linear-gradient";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import React from "react";

type Assignment = {
  id: string;
  title: string;
  subject: string;
  instructions: string;
  due_date: string;
  status: string;
  content: string;
  created_at: string;
};

type AIResponse = {
  id: string;
  response: string;
  provider: string;
  created_at: string;
};

export default function AssignmentDetail() {
  const { id } = useLocalSearchParams();
  const { session, profile, loading: profileLoading } = useAuth();
  const [assignment, setAssignment] = useState<Assignment | null>(null);
  const [loading, setLoading] = useState(true);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const {
    responses,
    loading: loadingResponses,
    deleteResponse,
  } = useAIResponses(id as string);
  const [exporting, setExporting] = useState(false);
  const [showFormatDialog, setShowFormatDialog] = useState(false);
  const [selectedResponse, setSelectedResponse] = useState<AIResponse | null>(
    null
  );
  const [showDeleteResponseDialog, setShowDeleteResponseDialog] =
    useState(false);
  const [responseToDelete, setResponseToDelete] = useState<AIResponse | null>(
    null
  );

  useEffect(() => {
    fetchAssignment();
  }, [id]);

  async function fetchAssignment() {
    try {
      if (!session?.user || !id) return;

      const { data, error } = await supabase
        .from("assignments")
        .select("*")
        .eq("id", id)
        .single();

      if (error) throw error;
      setAssignment(data);
    } catch (error) {
      console.error("Error fetching assignment:", error);
      alert("Error loading assignment");
      router.back();
    } finally {
      setLoading(false);
    }
  }

  async function handleDelete() {
    try {
      if (!session?.user || !id) return;

      const { error } = await supabase
        .from("assignments")
        .delete()
        .eq("id", id);

      if (error) throw error;

      router.replace("/dashboard/assignments");
    } catch (error) {
      console.error("Error deleting assignment:", error);
      alert("Error deleting assignment");
    }
  }

  async function handleStatusChange(newStatus: string) {
    try {
      if (!session?.user || !id) return;

      const { error } = await supabase
        .from("assignments")
        .update({ status: newStatus })
        .eq("id", id);

      if (error) throw error;

      setAssignment((prev) => (prev ? { ...prev, status: newStatus } : null));
    } catch (error) {
      console.error("Error updating status:", error);
      alert("Error updating status");
    }
  }

  async function handleShareAssignment() {
    try {
      if (!assignment) return;

      await shareContent(
        `${assignment.instructions}\n\nDue Date: ${new Date(
          assignment.due_date
        ).toLocaleDateString()}`,
        {
          title: assignment.title,
          message: `Assignment for ${assignment.subject}`,
          filename: `assignment_${assignment.id}.txt`,
        }
      );
    } catch (error) {
      console.error("Error sharing assignment:", error);
      alert("Error sharing assignment");
    }
  }

  async function handleShareResponse(response: AIResponse) {
    try {
      await shareContent(response.response, {
        title: `AI Response - ${assignment?.title}`,
        message: `Generated by ${
          response.provider === "openai" ? "ChatGPT" : "Gemini AI"
        } on ${new Date(response.created_at).toLocaleString()}`,
        filename: `ai_response_${response.id}.txt`,
      });
    } catch (error) {
      console.error("Error sharing response:", error);
      alert("Error sharing response");
    }
  }

  async function handleExportPDF(format: PDFFormat) {
    try {
      if (!assignment) {
        alert("Assignment not found");
        return;
      }

      setExporting(true);

      const content = selectedResponse
        ? `${profile?.school_name?.toUpperCase()}
DEPARTMENT OF ${profile?.department?.toUpperCase() || "COMPUTER TECHNOLOGY"}
${assignment.subject.toUpperCase()} COURSE

NAME: ${profile?.full_name}
INDEX NUMBER: ${profile?.student_number}
PROGRAM: ${profile?.program || "BTech Level 400, Computer Technology"}
DATE: ${new Date().toLocaleDateString("en-US", {
            day: "numeric",
            month: "long",
            year: "numeric",
          })}


${selectedResponse.response}`
        : assignment.instructions;

      await exportToPDF({
        title: assignment.title,
        content: content,
        format,
      });
    } catch (error) {
      console.error("Error exporting PDF:", error);
      alert(error instanceof Error ? error.message : "Error exporting PDF");
    } finally {
      setExporting(false);
      setShowFormatDialog(false);
      setSelectedResponse(null);
    }
  }

  async function handleDeleteResponse(response: AIResponse) {
    try {
      await deleteResponse(response.id);
      setShowDeleteResponseDialog(false);
      setResponseToDelete(null);
    } catch (error) {
      console.error("Error deleting response:", error);
      alert("Error deleting response");
    }
  }

  if (loading || !assignment || profileLoading) {
    return (
      <View style={styles.loadingContainer}>
        <MaterialCommunityIcons name="book-clock" size={40} color="#1a237e" />
        <Text style={styles.loadingText}>Loading assignment...</Text>
      </View>
    );
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "completed":
        return "#4CAF50"; // Green
      case "in_progress":
        return "#2196F3"; // Blue
      case "draft":
      default:
        return "#FFA000"; // Amber
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "completed":
        return "check-circle";
      case "in_progress":
        return "progress-clock";
      case "draft":
      default:
        return "pencil-outline";
    }
  };

  return (
    <View style={styles.container}>
      <LinearGradient
        colors={["#4c669f", "#3b5998", "#192f6a"]}
        style={styles.gradient}
      >
        <ScrollView style={styles.scrollView}>
          <Surface style={styles.headerCard}>
            <View style={styles.headerContent}>
              <MaterialCommunityIcons
                name="book-open-page-variant"
                size={40}
                color="#1a237e"
                style={styles.headerIcon}
              />
              <Text variant="headlineMedium" style={styles.title}>
                {assignment.title}
              </Text>
              <Text variant="titleMedium" style={styles.subject}>
                {assignment.subject}
              </Text>

              <View style={styles.statusSection}>
                <Chip
                  mode="flat"
                  onPress={() => {
                    const newStatus =
                      assignment.status === "draft"
                        ? "in_progress"
                        : assignment.status === "in_progress"
                        ? "completed"
                        : "draft";
                    handleStatusChange(newStatus);
                  }}
                  style={[
                    styles.statusChip,
                    { backgroundColor: getStatusColor(assignment.status) },
                  ]}
                  icon={() => (
                    <MaterialCommunityIcons
                      name={getStatusIcon(assignment.status)}
                      size={16}
                      color="white"
                    />
                  )}
                  textStyle={{ color: "white" }}
                >
                  {assignment.status.replace("_", " ").toUpperCase()}
                </Chip>
              </View>
            </View>
          </Surface>

          <Surface style={styles.detailsCard}>
            <View style={styles.detailsSection}>
              <View style={styles.sectionHeader}>
                <MaterialCommunityIcons
                  name="calendar"
                  size={24}
                  color="#1a237e"
                />
                <Text variant="titleMedium" style={styles.sectionTitle}>
                  Due Date
                </Text>
              </View>
              <Text variant="bodyLarge" style={styles.sectionContent}>
                {new Date(assignment.due_date).toLocaleDateString()}
              </Text>
            </View>

            <Divider style={styles.divider} />

            <View style={styles.detailsSection}>
              <View style={styles.sectionHeader}>
                <MaterialCommunityIcons
                  name="text-box-outline"
                  size={24}
                  color="#1a237e"
                />
                <Text variant="titleMedium" style={styles.sectionTitle}>
                  Instructions
                </Text>
              </View>
              <Text variant="bodyLarge" style={styles.sectionContent}>
                {assignment.instructions || "No instructions provided"}
              </Text>
            </View>

            {assignment.content && (
              <>
                <Divider style={styles.divider} />
                <View style={styles.detailsSection}>
                  <View style={styles.sectionHeader}>
                    <MaterialCommunityIcons
                      name="file-document-outline"
                      size={24}
                      color="#1a237e"
                    />
                    <Text variant="titleMedium" style={styles.sectionTitle}>
                      Content
                    </Text>
                  </View>
                  <Text variant="bodyLarge" style={styles.sectionContent}>
                    {assignment.content}
                  </Text>
                </View>
              </>
            )}
          </Surface>

          <Surface style={styles.actionsCard}>
            <View style={styles.buttonContainer}>
              <Button
                mode="contained"
                icon="pencil"
                onPress={() => router.push(`/dashboard/assignments/${id}/edit`)}
                style={styles.actionButton}
                contentStyle={styles.buttonContent}
                theme={{ roundness: 10 }}
              >
                Edit Assignment
              </Button>
              <Button
                mode="contained"
                icon="robot"
                onPress={() => router.push(`/dashboard/assignments/${id}/generate`)}
                style={styles.actionButton}
                contentStyle={styles.buttonContent}
                theme={{ roundness: 10 }}
              >
                Generate Solution
              </Button>
           
              <Button
                mode="outlined"
                icon="delete"
                onPress={() => setShowDeleteDialog(true)}
                style={[styles.actionButton, styles.deleteButton]}
                textColor="red"
                theme={{ roundness: 10 }}
              >
                Delete Assignment
              </Button>
            </View>
          </Surface>

          {responses.length > 0 && (
            <Surface style={styles.responsesCard}>
              <View style={styles.sectionHeader}>
                <MaterialCommunityIcons
                  name="robot-outline"
                  size={24}
                  color="#1a237e"
                />
                <Text variant="titleLarge" style={styles.sectionTitle}>
                  Generated Solutions
                </Text>
              </View>

              {responses.map((response) => (
                <Surface key={response.id} style={styles.responseItem}>
                  <View style={styles.responseHeader}>
                    <Chip
                      mode="outlined"
                      style={[
                        styles.providerChip,
                        {
                          borderColor:
                            response.provider === "openai"
                              ? "#10a37f"
                              : "#1a73e8",
                        },
                      ]}
                      textStyle={{
                        color:
                          response.provider === "openai"
                            ? "#10a37f"
                            : "#1a73e8",
                      }}
                    >
                      {response.provider === "openai" ? "ChatGPT" : "Gemini AI"}
                    </Chip>
                    <Text variant="bodySmall" style={styles.timestamp}>
                      {new Date(response.created_at).toLocaleString()}
                    </Text>
                  </View>

                  <View style={styles.markdownContainer}>
                    <MarkdownPreview content={response.response} />
                  </View>

                  <View style={styles.responseActions}>
                    <IconButton
                      icon="content-copy"
                      size={20}
                      onPress={() => {
                        Clipboard.setString(response.response);
                        alert("Copied to clipboard!");
                      }}
                      style={styles.actionIcon}
                    />
                    <IconButton
                      icon="share"
                      size={20}
                      onPress={() => handleShareResponse(response)}
                      style={styles.actionIcon}
                    />
                    <IconButton
                      icon="file-pdf-box"
                      size={20}
                      onPress={() => {
                        setSelectedResponse(response);
                        setShowFormatDialog(true);
                      }}
                      disabled={exporting}
                      style={styles.actionIcon}
                    />
                    <IconButton
                      icon="delete"
                      size={20}
                      onPress={() => {
                        setResponseToDelete(response);
                        setShowDeleteResponseDialog(true);
                      }}
                      style={styles.actionIcon}
                      iconColor="red"
                    />
                  </View>
                </Surface>
              ))}
            </Surface>
          )}

          <View style={styles.bottomPadding} />
        </ScrollView>
      </LinearGradient>

      <Portal>
        <Dialog
          visible={showDeleteDialog}
          onDismiss={() => setShowDeleteDialog(false)}
          style={styles.dialog}
        >
          <Dialog.Title>Delete Assignment</Dialog.Title>
          <Dialog.Content>
            <Text variant="bodyMedium">
              Are you sure you want to delete this assignment? This action
              cannot be undone.
            </Text>
          </Dialog.Content>
          <Dialog.Actions>
            <Button onPress={() => setShowDeleteDialog(false)}>Cancel</Button>
            <Button onPress={handleDelete} textColor="red">
              Delete
            </Button>
          </Dialog.Actions>
        </Dialog>

        <PDFFormatDialog
          visible={showFormatDialog}
          onDismiss={() => {
            setShowFormatDialog(false);
            setSelectedResponse(null);
          }}
          onConfirm={handleExportPDF}
        />

        <Dialog
          visible={showDeleteResponseDialog}
          onDismiss={() => {
            setShowDeleteResponseDialog(false);
            setResponseToDelete(null);
          }}
          style={styles.dialog}
        >
          <Dialog.Title>Delete Response</Dialog.Title>
          <Dialog.Content>
            <Text variant="bodyMedium">
              Are you sure you want to delete this AI-generated response? This
              action cannot be undone.
            </Text>
          </Dialog.Content>
          <Dialog.Actions>
            <Button
              onPress={() => {
                setShowDeleteResponseDialog(false);
                setResponseToDelete(null);
              }}
            >
              Cancel
            </Button>
            <Button
              onPress={() =>
                responseToDelete && handleDeleteResponse(responseToDelete)
              }
              textColor="red"
            >
              Delete
            </Button>
          </Dialog.Actions>
        </Dialog>
      </Portal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  gradient: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "#f5f5f5",
  },
  loadingText: {
    marginTop: 16,
    color: "#1a237e",
    fontSize: 16,
  },
  headerCard: {
    margin: 16,
    marginTop: 24,
    padding: 20,
    borderRadius: 20,
    backgroundColor: "rgba(255, 255, 255, 0.95)",
    elevation: 4,
  },
  headerContent: {
    alignItems: "center",
  },
  headerIcon: {
    marginBottom: 16,
  },
  title: {
    color: "#1a237e",
    fontWeight: "bold",
    textAlign: "center",
    marginBottom: 8,
  },
  subject: {
    color: "#666",
    marginBottom: 16,
  },
  statusSection: {
    flexDirection: "row",
    justifyContent: "center",
  },
  statusChip: {
    borderRadius: 20,
  },
  detailsCard: {
    margin: 16,
    marginTop: 0,
    padding: 20,
    borderRadius: 20,
    backgroundColor: "rgba(255, 255, 255, 0.95)",
    elevation: 4,
  },
  detailsSection: {
    marginBottom: 16,
  },
  sectionHeader: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 12,
  },
  sectionTitle: {
    marginLeft: 8,
    color: "#1a237e",
    fontWeight: "bold",
  },
  sectionContent: {
    color: "#444",
    lineHeight: 24,
  },
  divider: {
    marginVertical: 16,
  },
  actionsCard: {
    margin: 16,
    marginTop: 0,
    padding: 20,
    borderRadius: 20,
    backgroundColor: "rgba(255, 255, 255, 0.95)",
    elevation: 4,
  },
  buttonContainer: {
    gap: 12,
  },
  actionButton: {
    elevation: 2,
  },
  buttonContent: {
    paddingVertical: 8,
  },
  deleteButton: {
    borderColor: "red",
  },
  responsesCard: {
    margin: 16,
    marginTop: 0,
    padding: 20,
    borderRadius: 20,
    backgroundColor: "rgba(255, 255, 255, 0.95)",
    elevation: 4,
  },
  responseItem: {
    marginTop: 16,
    padding: 16,
    borderRadius: 12,
    backgroundColor: "white",
    elevation: 2,
  },
  responseHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 12,
  },
  providerChip: {
    height: 28,
  },
  timestamp: {
    color: "#666",
  },
  markdownContainer: {
    backgroundColor: "#f8f9fa",
    borderRadius: 8,
    padding: 16,
  },
  responseActions: {
    flexDirection: "row",
    justifyContent: "flex-end",
    marginTop: 8,
  },
  actionIcon: {
    margin: 0,
  },
  dialog: {
    borderRadius: 20,
  },
  bottomPadding: {
    height: 32,
  },
});
